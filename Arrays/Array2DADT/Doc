
The Array2D Abstract Data Type

As we saw earlier, Python does not directly support built-in arrays of any dimension. 
But, in the previous section, we were able to use the ctypes module to create
a one-dimensional hardware-supported array that we used to implement the Array
ADT. Two-dimensional arrays are also very common in computer programming,
where they are used to solve problems that require data to be organized into rows
and columns. Since 2-D arrays are not provided by Python, we define the Array2D
abstract data type for creating 2-D arrays. It consists of a limited set of operations
similar to those provided by the one-dimensional Array ADT.


A two-dimensional array consists of a collection of elements organized into rows
and columns. Individual elements are referenced by specifying the specific row and
column indices (r, c), both of which start at 0.

   Array2D( nrows, ncols ): Creates a two-dimensional array organized into
       rows and columns. The nrows and ncols arguments indicate the size of the
       table. The individual elements of the table are initialized to None.
   numRows(): Returns the number of rows in the 2-D array.
   numCols(): Returns the number of columns in the 2-D array.
   clear( value ): Clears the array by setting each element to the given value.
   getitem( i1, i2 ): Returns the value stored in the 2-D array element at the
    position indicated by the 2-tuple (i1, i2), both of which must be within the
    valid range. Accessed using the subscript operator: y = x[1,2].
   setitem( i1, i2, value ): Modifies the contents of the 2-D array element
    indicated by the 2-tuple (i1, i2) with the new value. Both indices must be
    within the valid range. Accessed using the subscript operator: x[0,3] = y.