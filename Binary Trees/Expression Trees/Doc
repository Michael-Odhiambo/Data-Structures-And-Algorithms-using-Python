
EXPRESSION TREES.

Arithmetic expressions such as ( 9 + 3 ) * ( 8 - 4 ) can be represented using an expression tree. An expression tree
is a binary tree in which the operators are stored in the interior nodes and the operands ( the variables or constant
values ) are stored in the leaves. Once constructed, an expression tree an be used to evaluate the expression or for
converting an infix expression to either prefix or postfix notation.

The structure of the expression tree is based on the order in which the operators are evaluated. The operator in each
internal node is evaluated after both its left and right subtrees have been evaluated. Thus, the lower an operator is in
a subtree, the earlier it will be evaluated. The root node contains the operator to be evaluated.

While Python provides the eval() function for evaluating an arithmetic expression stored as a string, the string must be
parsed each time it's evaluated. This means the Python interpreter has to determine the order in which the operators are
evaluated and then perform each of the corresponding operations. One ways it can do this is with the use of an expression
tree. After the expression has been parsed and the tree constructed, the evaluation step is quite simple. This real-time
evaluation of expression strings is not commonly available in compiled languages. When using such a language and a user-
supplied expression has to be evaluated, an expression tree can be constructed and evaluated to obtain the result.

EXPRESSION TREE ABSTRACT DATA TYPE.

Arithmetic expressions can consist of both unary ( -a, n! ) and binary operators ( a + b ). We only consider expressions
containing binary operators and leave inclusion of unary operators as an exercise. Binary operators are stored in an
expression tree with the left subtree containing the left side of the operation and the right subtree containing the right
side. We define the Expression Tree ADT below for use with arithmetic expressions consisting of operands comprised of
single-integer digits or single-letter variables.

An expression tree is a binary tree representation of an arithmetic expression that consists of various operators ( +, -
*, /, % ) and operands comprised of single integer digits and single-letter variables within a fully paranthesized expression.

  - ExpressionTree( expStr ) : Builds an expression tree for the expression give in exprStr. Assume the string contains a valid
    fully paranthesized expression.

  - evaluate( varDict ) : Evaluates the expression tree and returns the numeric result. The values of the single-letter
    variables are extracted from the supplied dictionary structure. An exception is raised if there is a division by zero
    error or an undefined variable is used.

  - toString() : Constructs and returns a string representation of the expression.

